
const {execSync} = require('child_process');
const {writeFileSync} = require('fs');

let version = ''+execSync("nu -v");
let wrapSingleLineCode = str => "```" + str.trim() + "```";
let wrapMultiLineCode = str => "```shell\n" + str + "```";

let wrapSeparatedListPair = (str, sep) => ' * ' + str.split(sep).map((e, i) => !i ? wrapSingleLineCode(e) : e).join(': ');

// Get the raw data to make into MD files.
let commands = JSON.parse(''+execSync(`nu -c "help commands | where not is_custom | select name category | group-by name | to json"`));

for (let name of Object.keys(commands)) {
	// Get the help page
	const helpStr = ''+execSync(`nu -c "help ${name} | ansi strip"`);

	let output = '';
	
	let frontmatter = {
		version,
		title: name,
		categories: commands[name].map(e=>e.category).join('\n'),
		usage: '',
	};

	helpStr.split(/=======+/).forEach((help,i) => {
		// Add <hr> between command sections
		if (i > 0) {
			output += '---\n';
		}
		// Grab the data which can only be obtained from the help page.
		let [_, usage, extraUsage, signature, subcommands, flags, parameters, examples] =
			/^\n*(.+?)\n\n(?:(?!Search terms:)(.+?)\n\n)?(?:Search terms:.+?\n\n)?Usage:\n(.+?)\n\n(?:Subcommands:\n(.+?)\n\n)?Flags:\n(.+?)\n\n(?:Parameters:\n(.+?)\n\n)?(?:Examples:\n(.+))?$/msg.exec(help);

		output += `# <code>${name}</code> for ${commands[name][i].category}\n\n<div class='command-title'>${usage}</div>\n\n`;
		if (extraUsage) {
			output += "## Notes\n\n" + extraUsage + "\n\n";
		}
		if (signature) {
			output += `## Signature\n\n${wrapSingleLineCode(signature)}\n\n`;
		}
		if (subcommands) {
			output += `## Subcommands\n\n${subcommands.split('\n').map(e => wrapSeparatedListPair(e, ' - ')).join('\n')}\n`;
		}
		if (flags) {
			output += `## Flags\n\n${flags.split('\n').map(e => wrapSeparatedListPair(e, ' - ')).join('\n')}\n`;
		}
		if (parameters) {
			output += `## Parameters\n\n${parameters.split('\n').map(e => wrapSeparatedListPair(e, ': ')).join('\n')}\n`;
		}
		if (examples) {
			output += `## Examples\n\n${examples.replace(/(?:  (?=[> ] ).+\n)+/g, wrapMultiLineCode)}\n`;
		}

		frontmatter.usage += usage + '\n';
	});

	output = `---\n${JSON.stringify(frontmatter)}\n---\n`
	 + `<!-- THIS FILE IS GENERATED BY update_book_commands.cjs USING NUSHELL'S HELP COMMANDS.\nREFRAIN FROM EDITING IT MANUALLY.-->\n` + output;

	writeFileSync(`book/commands/${name.replace(/\s/g,'_')}.md`, output);
}

process.exit();
